use phf;

// TODO Validate: 'input lifetime will be difficult to do with a streaming source (BufRead)
#[derive(Clone, Debug, PartialEq, Eq)]
pub enum Token<'input> {
    // Keywords:
    Abort,
    Action,
    Add,
    After,
    All,
    Alter,
    Analyze,
    And,
    // Any,
    As,
    Asc,
    Attach,
    Autoincr,
    Before,
    Begin,
    Between,
    By,
    Cascade,
    Case,
    Cast,
    Check,
    Collate,
    ColumnKw,
    Commit,
    Conflict,
    Constraint,
    Create,
    Cross,
    CurrentDate,
    CurrentTime,
    CurrentTimestamp,
    Database,
    Default,
    Deferrable,
    Deferred,
    Delete,
    Desc,
    Detach,
    Distinct,
    Drop,
    Each,
    Else,
    End,
    Escape,
    Except,
    Exclusive,
    Exists,
    Explain,
    Fail,
    For,
    Foreign,
    From,
    Full,
    // Function,
    Glob,
    Group,
    Having,
    If,
    Ignore,
    Immediate,
    In,
    Index,
    Indexed,
    Initially,
    Inner,
    Insert,
    Instead,
    Intersect,
    Into,
    Is,
    // IsNot,
    IsNull,
    Join,
    Key,
    Left,
    Like,
    Limit,
    Match,
    Natural,
    No,
    Not,
    NotNull,
    Null,
    Of,
    Offset,
    On,
    Or,
    Order,
    Outer,
    Plan,
    Pragma,
    Primary,
    Query,
    Raise,
    Recursive,
    References,
    Regexp,
    Reindex,
    Release,
    Rename,
    Replace,
    Restrict,
    Right,
    Rollback,
    Row,
    Savepoint,
    Select,
    Set,
    Table,
    Temp,
    Then,
    To,
    Transaction,
    Trigger,
    Union,
    Unique,
    Update,
    Using,
    Vacuum,
    Values,
    View,
    Virtual,
    When,
    Where,
    With,
    Without,

    // Identifiers:
    StringLiteral(&'input [u8]),
    Id(&'input [u8]),
    Variable(&'input [u8]),

    // Values:
    Blob(&'input [u8]),
    Integer(&'input [u8]),
    Float(&'input [u8]),

    // Symbols:
    BitAnd,
    BitNot,
    BitOr,
    Comma,
    Concat,
    Dot,
    Equals,
    GreaterThan,
    GreaterEquals,
    LeftParen,
    LeftShift,
    LessEquals,
    LessThan,
    Minus,
    NotEquals,
    Plus,
    Reminder,
    RightParen,
    RightShift,
    Semi,
    Slash,
    Star,
}

#[cfg_attr(rustfmt, rustfmt_skip)]
static KEYWORDS: phf::Map<&'static [u8], Token<'static>> = phf_map! {
    b"ABORT" => Token::Abort,
    b"ACTION" => Token::Action,
    b"ADD" => Token::Add,
    b"AFTER" => Token::After,
    b"ALL" => Token::All,
    b"ALTER" => Token::Alter,
    b"ANALYZE" => Token::Analyze,
    b"AND" => Token::And,
    b"AS" => Token::As,
    b"ASC" => Token::Asc,
    b"ATTACH" => Token::Attach,
    b"AUTOINCREMENT" => Token::Autoincr,
    b"BEFORE" => Token::Before,
    b"BEGIN" => Token::Begin,
    b"BETWEEN" => Token::Between,
    b"BY" => Token::By,
    b"CASCADE" => Token::Cascade,
    b"CASE" => Token::Case,
    b"CAST" => Token::Cast,
    b"CHECK" => Token::Check,
    b"COLLATE" => Token::Collate,
    b"COLUMN" => Token::ColumnKw,
    b"COMMIT" => Token::Commit,
    b"CONFLICT" => Token::Conflict,
    b"CONSTRAINT" => Token::Constraint,
    b"CREATE" => Token::Create,
    b"CROSS" => Token::Cross,
    b"CURRENT_DATE" => Token::CurrentDate,
    b"CURRENT_TIME" => Token::CurrentTime,
    b"CURRENT_TIMESTAMP" => Token::CurrentTimestamp,
    b"DATABASE" => Token::Database,
    b"DEFAULT" => Token::Default,
    b"DEFERRABLE" => Token::Deferrable,
    b"DEFERRED" => Token::Deferred,
    b"DELETE" => Token::Delete,
    b"DESC" => Token::Desc,
    b"DETACH" => Token::Detach,
    b"DISTINCT" => Token::Distinct,
    b"DROP" => Token::Drop,
    b"EACH" => Token::Each,
    b"ELSE" => Token::Else,
    b"END" => Token::End,
    b"ESCAPE" => Token::Escape,
    b"EXCEPT" => Token::Except,
    b"EXCLUSIVE" => Token::Exclusive,
    b"EXISTS" => Token::Exists,
    b"EXPLAIN" => Token::Explain,
    b"FAIL" => Token::Fail,
    b"FOR" => Token::For,
    b"FOREIGN" => Token::Foreign,
    b"FROM" => Token::From,
    b"FULL" => Token::Full,
    b"GLOB" => Token::Glob,
    b"GROUP" => Token::Group,
    b"HAVING" => Token::Having,
    b"IF" => Token::If,
    b"IGNORE" => Token::Ignore,
    b"IMMEDIATE" => Token::Immediate,
    b"IN" => Token::In,
    b"INDEX" => Token::Index,
    b"INDEXED" => Token::Indexed,
    b"INITIALLY" => Token::Initially,
    b"INNER" => Token::Inner,
    b"INSERT" => Token::Insert,
    b"INSTEAD" => Token::Instead,
    b"INTERSECT" => Token::Intersect,
    b"INTO" => Token::Into,
    b"IS" => Token::Is,
    b"ISNULL" => Token::IsNull,
    b"JOIN" => Token::Join,
    b"KEY" => Token::Key,
    b"LEFT" => Token::Left,
    b"LIKE" => Token::Like,
    b"LIMIT" => Token::Limit,
    b"MATCH" => Token::Match,
    b"NATURAL" => Token::Natural,
    b"NO" => Token::No,
    b"NOT" => Token::Not,
    b"NOTNULL" => Token::NotNull,
    b"NULL" => Token::Null,
    b"OF" => Token::Of,
    b"OFFSET" => Token::Offset,
    b"ON" => Token::On,
    b"OR" => Token::Or,
    b"ORDER" => Token::Order,
    b"OUTER" => Token::Outer,
    b"PLAN" => Token::Plan,
    b"PRAGMA" => Token::Pragma,
    b"PRIMARY" => Token::Primary,
    b"QUERY" => Token::Query,
    b"RAISE" => Token::Raise,
    b"RECURSIVE" => Token::Recursive,
    b"REFERENCES" => Token::References,
    b"REGEXP" => Token::Regexp,
    b"REINDEX" => Token::Reindex,
    b"RELEASE" => Token::Release,
    b"RENAME" => Token::Rename,
    b"REPLACE" => Token::Replace,
    b"RESTRICT" => Token::Restrict,
    b"RIGHT" => Token::Right,
    b"ROLLBACK" => Token::Rollback,
    b"ROW" => Token::Row,
    b"SAVEPOINT" => Token::Savepoint,
    b"SELECT" => Token::Select,
    b"SET" => Token::Set,
    b"TABLE" => Token::Table,
    b"TEMP" => Token::Temp,
    b"TEMPORARY" => Token::Temp,
    b"THEN" => Token::Then,
    b"TO" => Token::To,
    b"TRANSACTION" => Token::Transaction,
    b"TRIGGER" => Token::Trigger,
    b"UNION" => Token::Union,
    b"UNIQUE" => Token::Unique,
    b"UPDATE" => Token::Update,
    b"USING" => Token::Using,
    b"VACUUM" => Token::Vacuum,
    b"VALUES" => Token::Values,
    b"VIEW" => Token::View,
    b"VIRTUAL" => Token::Virtual,
    b"WHEN" => Token::When,
    b"WHERE" => Token::Where,
    b"WITH" => Token::With,
    b"WITHOUT" => Token::Without,
};
